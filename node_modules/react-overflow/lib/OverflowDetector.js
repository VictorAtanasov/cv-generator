'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _ResizeDetector = require('./ResizeDetector');

var _ResizeDetector2 = _interopRequireDefault(_ResizeDetector);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OverflowDetector = function (_Component) {
  _inherits(OverflowDetector, _Component);

  function OverflowDetector(props) {
    _classCallCheck(this, OverflowDetector);

    var _this = _possibleConstructorReturn(this, (OverflowDetector.__proto__ || Object.getPrototypeOf(OverflowDetector)).call(this, props));

    _this.isOverflowed = false;
    _this.domElement = null;
    _this.setDOMElement = _this.setDOMElement.bind(_this);
    _this.checkOverflow = _this.checkOverflow.bind(_this);
    return _this;
  }

  _createClass(OverflowDetector, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.checkOverflow();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.checkOverflow();
    }
  }, {
    key: 'setDOMElement',
    value: function setDOMElement(domElement) {
      this.domElement = domElement;
    }
  }, {
    key: 'checkOverflow',
    value: function checkOverflow() {
      var isOverflowed = this.domElement.scrollWidth > this.domElement.clientWidth || this.domElement.scrollHeight > this.domElement.clientHeight;

      if (isOverflowed !== this.isOverflowed) {
        this.isOverflowed = isOverflowed;
        if (this.props.onOverflowChange) {
          this.props.onOverflowChange(isOverflowed);
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          style = _props.style,
          className = _props.className,
          children = _props.children;

      return _react2.default.createElement(
        'div',
        {
          ref: this.setDOMElement,
          style: _extends({}, style, { position: 'relative' }),
          className: className
        },
        children,
        _react2.default.createElement(_ResizeDetector2.default, { onResize: this.checkOverflow })
      );
    }
  }]);

  return OverflowDetector;
}(_react.Component);

OverflowDetector.propTypes = {
  onOverflowChange: _propTypes2.default.func,
  children: _propTypes2.default.node,
  style: _propTypes2.default.object,
  className: _propTypes2.default.string
};
OverflowDetector.defaultProps = {
  style: {}
};
exports.default = OverflowDetector;