'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable jsx-a11y/alt-text */


var OBJECT_STYLE = {
  display: 'block',
  position: 'absolute',
  top: 0,
  left: 0,
  height: '100%',
  width: '100%',
  overflow: 'hidden',
  pointerEvents: 'none',
  zIndex: -1
};

var ResizeDetector = function (_Component) {
  _inherits(ResizeDetector, _Component);

  function ResizeDetector(props) {
    _classCallCheck(this, ResizeDetector);

    var _this = _possibleConstructorReturn(this, (ResizeDetector.__proto__ || Object.getPrototypeOf(ResizeDetector)).call(this, props));

    _this.state = {
      isMounted: false
    };
    _this.setDOMElement = _this.setDOMElement.bind(_this);
    _this.handleLoad = _this.handleLoad.bind(_this);
    return _this;
  }

  _createClass(ResizeDetector, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.setState({
        isMounted: true
      });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.domElement.contentDocument.defaultView.removeEventListener('resize', this.props.onResize);
    }
  }, {
    key: 'setDOMElement',
    value: function setDOMElement(domElement) {
      this.domElement = domElement;
    }
  }, {
    key: 'handleLoad',
    value: function handleLoad() {
      this.domElement.contentDocument.defaultView.addEventListener('resize', this.props.onResize);
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement('object', {
        style: OBJECT_STYLE,
        type: 'text/html',
        data: this.state.isMounted ? 'about:blank' : null,
        ref: this.setDOMElement,
        onLoad: this.handleLoad
      });
    }
  }]);

  return ResizeDetector;
}(_react.Component);

ResizeDetector.propTypes = {
  onResize: _propTypes2.default.func.isRequired
};
exports.default = ResizeDetector;